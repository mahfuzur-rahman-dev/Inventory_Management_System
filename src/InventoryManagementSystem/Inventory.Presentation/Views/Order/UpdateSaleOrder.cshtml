@model UpdateSaleOrderModel

@{
    var products = ViewBag.Products as IEnumerable<SelectListItem>; // Ensure the correct type
    var orderTypes = ViewBag.OrderTypes;
    ViewData["Title"] = "Create sale order";
}

<div class="container border border-2 border-dark">
    <form asp-action="UpdateSaleOrder" asp-controller="Order" method="post" id="orderForm" asp-antiforgery="true">
        <br />
        <div class="container p-3">
            <h1>Update sale order</h1>
            <hr />
        </div>

        <div class="row p-4 border">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Order Type Dropdown -->
            <div class="form-group">
                <label asp-for="OrderType" class="control-label">Order Type</label>
                <select asp-for="OrderType" asp-items="orderTypes" class="form-select" disabled>
                    <option value="Purchase" selected></option>
                </select>
                <input asp-for="OrderType" value="Sale" hidden />
                <span asp-validation-for="OrderType" class="text-danger"></span>
            </div>

            <!-- Product Dropdown (Disabled) -->
            <div class="form-group">
                <label asp-for="ProductId" class="control-label">Product</label>
                <select asp-for="ProductId" class="form-select" disabled>
                    @{
                        <option value="@Model.ProductId">@Model.Product.Name</option>

                    }
                </select>

                <input asp-for="ProductId" hidden />

                <span asp-validation-for="ProductId" class="text-danger"></span>
            </div>

            <!-- Sale Quantity Input with Available Stock -->
            <div class="form-group">
                <label asp-for="Quantity" class="control-label text-danger">Quantity (available: <span id="availableProductStock">0</span>)</label>
                <input asp-for="Quantity" id="saleQuantity" placeholder="Enter quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>

            <!-- Unit Price Input -->
            <div class="form-group">
                <label asp-for="UnitPrice" class="control-label">Unit Price</label>
                <input asp-for="UnitPrice" id="unitPrice" placeholder="Enter unit price" class="form-control" />
                <span asp-validation-for="UnitPrice" class="text-danger"></span>
            </div>

            <!-- Total Amount Input (Read-only) -->
            <div class="form-group">
                <label asp-for="TotalAmount" class="control-label">Total Amount</label>
                <input asp-for="TotalAmount" id="totalAmount" placeholder="Total amount" class="form-control" readonly />
                <span asp-validation-for="TotalAmount" class="text-danger"></span>
            </div>

            <!-- Submit Button -->
            <div class="form-group d-flex justify-content-left mt-3">
                <button type="submit" id="submitOrder" class="btn btn-primary w-25">Create</button>
                <a asp-action="Index" asp-controller="Order" class="mx-2">Back to list</a>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        $(document).ready(function () {
            var availableStock = 0;
            var productId = $('select[name="ProductId"]').val(); // Get the selected product ID

            function calculateTotal() {
                var quantity = parseFloat($('#saleQuantity').val());
                var unitPrice = parseFloat($('#unitPrice').val());
                var total = 0;

                if (!isNaN(quantity) && !isNaN(unitPrice)) {
                    total = quantity * unitPrice;
                }

                $('#totalAmount').val(total.toFixed(2)); // Display total with 2 decimal places
            }

            $('#saleQuantity, #unitPrice').on('input', calculateTotal);

            // AJAX call to get product info
            if (productId) {
                $.ajax({
                    url: '@Url.Action("GetProductInfo", "Order")',
                    type: 'GET',
                    data: { productId: productId }, // Send the selected ProductId as data
                    success: function (response) {
                        availableStock = response.availableStock;
                        var unitPrice = response.unitPrice;

                        // Update available stock display
                        $('#availableProductStock').text(availableStock);

                        // Update unit price input field
                        $('#unitPrice').val(unitPrice);

                        // Optionally recalculate the total if the quantity is already entered
                        var quantity = parseFloat($('#saleQuantity').val());
                        if (!isNaN(quantity) && !isNaN(unitPrice)) {
                            var total = quantity * unitPrice;
                            $('#totalAmount').val(total.toFixed(2));
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: "Something went wrong fetching product details!"
                        });
                    }
                });
            }
        });
    </script>
}
